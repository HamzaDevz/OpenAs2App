name: Check source, Build and Push Image

on:
  # Se déclenche tous les jours à 3h du matin (vous pouvez ajuster)
  schedule:
    - cron: '0 3 * * *'
  # Permet aussi de le lancer manuellement pour tester
  workflow_dispatch:

jobs:
  check-build-and-push:
    # On peut le laisser sur ubuntu-latest car même le build Docker
    # est exécuté par notre runner self-hosted si on le spécifie au niveau du job.
    # Mais pour plus de clarté, mettons-le sur votre runner.
    runs-on: self-hosted

    permissions:
      # Donne la permission de créer des releases sur votre fork (pour marquer le succès)
      contents: write

    steps:
      # === PARTIE 1 : Le Gardien ===

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest upstream release tag
        id: upstream_release
        run: |
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/OpenAS2/OpenAs2App/releases/latest" | jq -r ".tag_name")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then echo "Could not fetch latest upstream tag. Exiting."; exit 1; fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Get latest self fork release tag
        id: self_release
        run: |
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name")
          if [ "$LATEST_TAG" == "null" ] || [ -z "$LATEST_TAG" ]; then LATEST_TAG="v0.0.0"; fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Compare tags and decide to proceed
        id: decision
        run: |
          echo "Upstream tag: ${{ steps.upstream_release.outputs.tag }}"
          echo "Our latest tag: ${{ steps.self_release.outputs.tag }}"
          if [ "${{ steps.upstream_release.outputs.tag }}" == "${{ steps.self_release.outputs.tag }}" ]; then
            echo "Tags are the same. Nothing to do."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "New upstream release found! Proceeding to build."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

      # === PARTIE 2 : Le Bâtisseur (ne s'exécute que si une nouvelle version est trouvée) ===

      # On utilise le tag de la nouvelle release pour faire le checkout
      - name: Checkout specific release tag
        if: steps.decision.outputs.proceed == 'true'
        uses: actions/checkout@v4
        with:
          repository: OpenAS2/OpenAs2App # On checkout le dépôt original directement
          ref: ${{ steps.upstream_release.outputs.tag }} # Au tag de la nouvelle release !

      - name: Log in to Docker Hub
        if: steps.decision.outputs.proceed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: steps.decision.outputs.proceed == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/openas2
          tags: type=semver,pattern={{version}}

      - name: Build and push Docker image
        if: steps.decision.outputs.proceed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # === PARTIE 3 : Marquer le succès ===

      # On crée la release sur notre fork APRÈS le build réussi, pour garder une trace.
      - name: Create new release on fork to mark success
        if: steps.decision.outputs.proceed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPSTREAM_TAG: ${{ steps.upstream_release.outputs.tag }}
        run: |
          gh release create "$UPSTREAM_TAG" \
             --repo "$GITHUB_REPOSITORY" \
             --title "Build successful for upstream: $UPSTREAM_TAG" \
             --notes "Automated release after a successful build and push of image with tag $UPSTREAM_TAG."
